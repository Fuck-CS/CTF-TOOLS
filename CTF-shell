#!/bin/bash -ex
#CTF-Tools

RED='\033[0;31m'
yellow='\033[1;33m'
blue='\033[1;34m'
NC='\033[0m' # No Color

#
# AFL
#

cat <<"EOF"
================================================================================

          ___  ______ _        _____          _        _ _ 
         / _ \ |  ___| |      |_   _|        | |      | | |
        / /_\ \| |_  | |  ______| | _ __  ___| |_ __ _| | |
        |  _  ||  _| | | |______| || '_ \/ __| __/ _` | | |
        | | | || |   | |____   _| || | | \__ \ || (_| | | |
        \_| |_/\_|   \_____/   \___/_| |_|___/\__\__,_|_|_|
================================================================================                                                            
EOF

initial() {
	echo "Select :"
	echo "1. Installation kit"
	echo "2. Exit"
	read -p "CTF-TOOLS --> " main_option
	if [[ $main_option -eq 1 ]]; then
		echo -e "${blue}Installation kit${blue}"
		fast_scan
	fi

	if [[ $main_option -eq 2 ]]; then
		echo -e "${blue}EXIT${blue}"
		exit
	fi
}

fast_scan() {
	echo -e "${blue}[+] Enter package options ${NC}"

	echo -e "${blue}**********Select Tools************${NC}"
	echo "1. AFL"
	echo "2. Android-sdk"
	echo "3. Angr"
	echo "4. Apktool"
	echo "5. Barf"
	echo "6. Beef"
	echo "7. Bindead"
	echo "8. Binwalk"
	echo "9. Burpsuite"
	echo "10. Capstone"
	echo "11. Checksec"
	echo "12. Codereason"
	echo "13. Commix"
	echo "14. Cribdrag"
	echo "15. Cross2"
	echo "16. Crosstool"
	echo "17. Df"
	echo "18. Dirb"
	echo "19. Dirsearch"
	echo "20. Dislocker"
	echo "21. Elfkickers"
	echo "22. Elfparser"
	echo "23. Evilize"
	echo "24. Exetractor"
	echo "25. Fastcoll"
	echo -e "** ${yellow}-------------------------------------- ${NC}**"
	echo "26. Featherduster"
	echo "27. Firmware-mod-kit"
	echo "28. Foresight"
	echo "29. Galois"
	echo "30. Gdb"
	echo "31. Gdb-heap"
	echo "32. Gef"
	echo "33. Hash-identifier"
	echo "34. Hashkill"
	echo "35. Hashpump"
	echo "36. Hashpump-partialhash"
	echo "37. Honggfuzz"
	echo "38. Jdgui"
	echo "39. Keystone"
	echo "40. Libc-database"
	echo "41. Libheap"
	echo "42. Lief"
	echo "43. Littleblackbox"
	echo "44. Manticore"
	echo "45. Miasm"
	echo "46. Mitmproxy"
	echo "47. Msieve"
	echo "48. Nonce-disrespect"
	echo "49. One_gadget"
	echo "50. Panda"
	echo -e "** ${yellow}-------------------------------------- ${NC}**"
	echo "51. Pathgrind"
	echo "52. Pdf-parser"
	echo "53. Peda"
	echo "54. Peepdf"
	echo "55. Pemcrack"
	echo "56. Pkcrack"
	echo "57. Preeny"
	echo "58. Pwndbg"
	echo "59. Pwntools"
	echo "60. Python-paddingoracle"
	echo "61. Python-pin"
	echo "62. Ppyvmmonitor"
	echo "63. Qemu"
	echo "64. Qira"
	echo "65. Radare2"
	echo "66. Rappel"
	echo "67. Reveng"
	echo "68. Ropper"
	echo "69. Rp++"
	echo "70. Rr"
	echo "71. Scratchabit"
	echo "72. Scratchablock"
	echo "73. Scrdec18"
	echo "74. Seccomp-tools"
	echo "75. Shellnoob"
	echo -e "** ${yellow}-------------------------------------- ${NC}**"
	echo "76. Shellsploit"
	echo "77. Snowman"
	echo "78. Sonic-visualizer"
	echo "79. Sqlmap"
	echo "80. Ssh_decoder"
	echo "81. Sslsplit"
	echo "82. Steganabara"
	echo "83. Stegdetect"
	echo "84. Stego-toolkit"
	echo "85. Stegsolve"
	echo "86. Subbrute"
	echo "87. Taintgrind"
	echo "88. Testdisk"
	echo "89. Tor-browser"
	echo "90. Uunicorn"
	echo "91. Valgrind"
	echo "92. Veles"
	echo "93. Villoc"
	echo "94. Virtualsocket"
	echo "95. Xortool"
	echo "96. Xrop"
	echo "97. Xspy"
	echo "98. Yafu"
	echo "99. Youtube-dl"
	echo "100. Z3"
	echo -e "** ${yellow}-------------------------------------- ${NC}**"

	read -p "[+]ENTER No.-->" fast_choice
	echo -e "${NC}"
	case $fast_choice in
	1)
		echo "[.1.] -> Fuzzing tool for testing program security "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear

			curl http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz | tar xz
			mv afl-* afl
			cd afl
			make -j $(nproc)
			cd qemu_mode
			# try to detect if python2 and 3 are installed
			if which python2 >/dev/null; then
				sed -i 's/python/python2/' ./build_qemu_support.sh
				sed -i 's!configure!configure --python=\$(which python2)!' ./build_qemu_support.sh
			fi
			./build_qemu_support.sh
			cd ../../

			mkdir -p bin
			cd bin
			ln -sf ../afl/{afl-as,afl-cmin,afl-gcc,afl-gotcpu,afl-plot,afl-qemu-trace,afl-showmap,afl-tmin,afl-whatsup} .
			cd ..

			cat <<END >bin/afl-fuzz
#!/bin/bash
$PWD/afl/afl-fuzz "\$@"
END
			chmod 755 bin/afl-fuzz

			#
			# multiafl
			#

			git clone --depth 1 https://github.com/zardus/multiafl
			cd bin
			ln -s ../multiafl/multiafl
			cd ..
			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed bison qemu

			;;
		3)
			clear

			set -eu -o pipefail

			apt-get -y build-dep qemu

			apt-get -y install bison libtool-bin
			;;
		esac
		;;
	2)
		echo "[.2.] -> Android SDK is Android's development kit "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			[ -e android-sdk_r24.4.1-linux.tgz ] || wget https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz
			[ -e android-sdk-linux ] || tar xfz android-sdk_r24.4.1-linux.tgz

			mkdir -p bin
			cd android-sdk-linux
			python -c 'for i in range(10): print "y"+"\n"*1024' | tools/android update sdk --no-ui

			cd ../bin
			ln -sf ../android-sdk-linux/platform-tools/{adb,fastboot} .

			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed jre7-openjdk jdk7-openjdk
			;;
		3)
			clear
			set -eu -o pipefail
			apt-get -y -o Dpkg::Options::="--force-overwrite" install openjdk-9-jre openjdk-9-jdk && apt-get -y install openjdk-7-jre openjdk-7-jdk
			;;
		esac
		;;
	3)
		echo "[.3.] -> A binary analysis tool with dynamic symbolic execution and static analysis... "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			source ctf-tools-venv-activate

			#[ -e $VIRTUAL_ENV/lib/python2.7/site-packages/PyQt4 ] || ln -s /usr/lib/python2.7/dist-packages/PyQt4 $VIRTUAL_ENV/lib/python2.7/site-packages/
			#[ -e $VIRTUAL_ENV/lib/python2.7/site-packages/sip.so ] || ln -s /usr/lib/python2.7/dist-packages/sip.so $VIRTUAL_ENV/lib/python2.7/site-packages/
			#[ -e $VIRTUAL_ENV/lib/python2.7/site-packages/pygraphviz ] || ln -s /usr/lib/pymodules/python2.7/pygraphviz $VIRTUAL_ENV/lib/python2.7/site-packages/

			git clone --depth 1 https://github.com/angr/angr-dev
			GIT_ASKPASS=echo angr-dev/setup.sh -w -r https://git:@github.com/salls angrop
			rm -rf angr-dev/wheels

			mkdir -p bin
			cd bin
			cat <<END >angr-management
#!/bin/bash -e

$VIRTUAL_ENV/bin/python -m angrmanagement "\$@"
END
			chmod 755 angr-management
			cd ..
			;;
		2)
			clear
			set -eu -o pipefail

			# for angr
			apt-get -y install virtualenvwrapper python2.7-dev build-essential libxml2-dev libxslt1-dev git libffi-dev cmake libreadline-dev libtool debootstrap debian-archive-keyring libglib2.0-dev libpixman-1-dev libqt4-dev graphviz-dev binutils-multiarch nasm libc6:i386 libgcc1:i386 libstdc++6:i386 libtinfo5:i386 zlib1g:i386

			# for angr-management
			apt-get -y install python-qt4 python-sip python-pygraphviz
			;;
		esac
		;;
	4)
		echo "[.4.] -> Apktool is a third-party tool to decompile Android Apk "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			VERSION=2.2.4

			mkdir bin
			cd bin
			wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
			wget "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_$VERSION.jar"
			ln -s "apktool_$VERSION.jar" apktool.jar
			chmod 755 apktool
			chmod 755 apktool.jar
			cd ..
			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed jre8-openjdk
			;;
		3)
			clear
			set -eu -o pipefail

			apt-get install -y default-jre

			;;
		esac
		;;
	5)
		echo "[.5.] -> Binary analysis reverse engineering framework "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		echo "3. Uninstall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear

			# it's z3!
			ctf-tools-pip install https://github.com/zardus/z3/archive/pypy-and-setup.zip

			set +e
			source ${VIRTUALENVWRAPPER_SCRIPT}
			workon ctftools
			set -e

			# pybfd can't be installed with pip
			git clone --depth 1 https://github.com/Groundworkstech/pybfd
			cd pybfd/
			python setup.py install
			cd ..

			# install pyasmjit
			git clone --depth 1 https://github.com/programa-stic/pyasmjit.git
			cd pyasmjit
			python setup.py install
			cd ..

			# install barf
			git clone --depth 1 https://github.com/programa-stic/barf-project
			cd barf-project/
			python setup.py install
			cd ..

			mkdir -p bin
			ln -s $(which BARFgadgets) bin/barfgadgets
			;;
		2)
			set -eu -o pipefail

			apt-get -y install binutils-multiarch-dev
			;;
		3)
			clear

			ctf-tools-pip uninstall -y barf pyasmjit
			rm -f $VIRTUAL_ENV/bin/BARFgadgets
			;;
		esac
		;;
	6)
		echo "[.6.] -> Browser development framework "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth 1 https://github.com/beefproject/beef

			cd beef
			bundle
			;;
		2)
			clear

			pacman -Syu --noconfirm --needed \
				ruby python2 ruby-bundler \
				git make gcc openssl patch readline \
				zlib libyaml libffi bzip2 autoconf automake \
				libtool bison sqlite
			;;
		3)
			clear
			echo "Need to get ruby with RVM... Unsupported for now"
			exit 1
			apt-get -y install build-essential openssl libreadline6 \
				libreadline6-dev zlib1g zlib1g-dev libssl-dev \
				libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 \
				libxml2-dev libxslt1-dev autoconf libc6-dev \
				libncurses5-dev automake libtool bison subversion
			;;
		esac
		;;

	7)
		echo "[.7.] -> Bindead-a static analysis tool for binaries.. "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			INST_DIR="$PWD"

			[ -e bindead ] || git clone --depth 1 https://bitbucket.org/mihaila/bindead.git
			cd bindead
			JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre ./build.sh
			mvn install
			cd ..

			[ -e p9 ] || git clone --depth 1 https://bitbucket.org/mihaila/p9.git
			cd p9
			JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre ./build.sh
			unzip p9.zip
			cd ..

			mkdir -p bin
			cat <<END >bin/bindead
#!/bin/bash
JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre java -jar $INST_DIR/bindead/bindead.jar "\$@"
END
			cat <<END >bin/p9
#!/bin/bash
$INST_DIR/p9/p9/bin/p9 --jdkhome /usr/lib/jvm/java-7-openjdk-amd64/jre "\$@"
END
			chmod 755 bin/*
			;;
		2)
			clear
			set -eu -o pipefail
			apt-get -o Dpkg::Options::="--force-overwrite" -y install maven libprotobuf-dev openjdk-9-jre openjdk-9-jdk && apt-get -y install maven libprotobuf-dev openjdk-7-jre openjdk-7-jdk

			;;
		esac
		;;
	8)
		echo "[.8.] -> Binwalk is a file analysis tool "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Unistall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth 1 https://github.com/devttys0/binwalk.git
			ctf-tools-pip install -e binwalk

			source ctf-tools-venv-activate
			mkdir -p bin
			ln -s $VIRTUAL_ENV/bin/binwalk bin
			;;
		2)
			clear
			ctf-tools-pip uninstall -y binwalk || true
			;;
		esac
		;;
	9)
		echo "[.9.] -> Burp Suite is an integrated platform for attacking web applications and contains many tools "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			wget -O ./burp.jar 'https://portswigger.net/DownloadUpdate.ashx?Product=Free'
			chmod 755 ./burp.jar
			mkdir -p bin
			cd bin
			ln -s ../burp.jar burpsuite
			cd ..

			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed jre7-openjdk
			;;
		3)
			clear
			set -eu -o pipefail

			apt-get -o Dpkg::Options::="--force-overwrite" -y install openjdk-9-jre && apt-get -y install openjdk-7-jre
			;;
		esac
		;;
	10)
		echo "[.10.] -> Capstone is a disassembly framework "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Test"
		echo "3. Uninstall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			ctf-tools-pip install --no-use-wheel -U capstone
			ctf-tools-pip3 install --no-use-wheel -U capstone
			;;
		2)
			clear

			PY_TEST_FILE=$(mktemp)
			cat <<END >$PY_TEST_FILE
from capstone import *
import sys

CODE = b"\x55\x48\x8b\x05\xb8\x13\x00\x00"

addresses = [0x1000, 0x1001]
md = Cs(CS_ARCH_X86, CS_MODE_64)
for idx, i in enumerate(md.disasm(CODE, 0x1000)):
	if i.address != addresses[idx]:
		sys.exit(1)

sys.exit(0)
END

			source ${VIRTUALENVWRAPPER_SCRIPT}

			set +e
			workon ctftools
			set -e
			python $PY_TEST_FILE
			deactivate

			set +e
			workon ctftools3
			set -e
			python $PY_TEST_FILE
			deactivate

			rm $PY_TEST_FILE
			;;
		3)
			clear
			ctf-tools-pip uninstall -y capstone || true
			ctf-tools-pip3 uninstall -y capstone || true
			;;
		esac
		;;
	11)
		echo "[.11.] -> Check executable file attributes "
		echo -e "${blue}[+] Enter package options ${NC}"
		git clone --depth 1 https://github.com/slimm609/checksec.sh
		mkdir bin
		cd bin
		ln -s ../checksec.sh/checksec .
		;;
	12)
		echo "[.12.] -> Binary code analysis framework "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth 1 https://github.com/trailofbits/codereason
			cd codereason
			find . -type f -exec sed -i 's:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain::g' {} \;
			./install_vex.sh
			# This step fails in travis-ci because of CMake 3.2 not finding Boost, while docker has CMake 2.8 which finds Boost just fine
			./make.sh
			cd ..

			mkdir -p bin
			cd bin
			ln -s ../codereason/build/bin/* .
			cd ..
			;;
		2)
			clear

			set -eu -o pipefail

			apt-get -y install build-essential gcc g++ make cmake libboost-dev libprotobuf-dev protobuf-compiler libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-date-time-dev libboost-regex-dev libboost-all-dev

			;;

		esac
		;;
	13)
		echo "[.13.] -> Commix is a vulnerability testing tool developed using Python "
		echo -e "${blue}[+] Enter package options ${NC}"

		git clone --depth 1 https://github.com/commixproject/commix.git
		mkdir bin
		cd bin
		ln -s ../commix/commix.py

		;;
	14)
		echo "[.14.] -> Interactive Crib Dragging Tool. "
		echo -e "${blue}[+] Enter package options ${NC}"
		git clone --depth 1 https://github.com/SpiderLabs/cribdrag

		mkdir bin
		cd bin
		ln -s ../cribdrag/* .
		cd ..
		;;
	15)
		echo "[.15.] -> Cross2 "
		echo -e "${blue}[+] Enter package options ${NC}"

		FILE=cross2-20130826.tgz
		INSTALL_DIR=$PWD

		[ ! -e $FILE ] && wget http://kozos.jp/books/asm/$FILE
		tar xf $FILE

		cd cross2/toolchain
		./fetch.sh
		./setup.sh
		cd ..
		sed -i -e "s|#makeopt=.*|makeopt='-j'|" config.sh
		sed -i -e "s|install_dir.*|install_dir=\"$INSTALL_DIR\"|" config.sh
		cd build
		./build-install-all.sh

		mkdir -p bin
		cd bin
		for i in ../*/bin/*; do
			F=$(basename $i)
			D=$(basename $(dirname $(dirname $i)))
			[ -f $D-$F ] || ln -s $i $D-$F
		done
		cd ..
		;;
	16)
		echo "[.16.] ->	Crosstool "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Build-sample"
		echo "2. Config"
		echo "3. Install"
		echo "4. Install-root-Archlinux"
		echo "5. Install-root-Debian"
		echo "6. Uninstall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			sample=$1

			[ -e ../x-tools/$sample ] && echo "Already built: $sample" && exit
			HOME=$(dirname $PWD) CT_PREFIX=$(dirname $PWD)/toolchains ./ct-ng $sample
			yes '' | HOME=$(dirname $PWD) CT_PREFIX=$(dirname $PWD)/toolchains ./ct-ng build.$(nproc)
			rm -rf .build/$sample

			;;
		2)
			clear
			#
			# Automatically generated make config: don't edit
			# crosstool-NG 1.20.0 Configuration
			# Thu May  7 05:26:28 2015
			#
			CT_CONFIGURE_has_make381=y
			CT_CONFIGURE_has_xz=y
			CT_CONFIGURE_has_svn=y
			CT_MODULES=y

			#
			# Paths and misc options
			#

			#
			# crosstool-NG behavior
			#
			# CT_OBSOLETE is not set
			# CT_EXPERIMENTAL is not set
			# CT_DEBUG_CT is not set

			#
			# Paths
			#
			CT_LOCAL_TARBALLS_DIR=""
			CT_WORK_DIR="${CT_TOP_DIR}/.build"
			CT_PREFIX_DIR="${HOME}/x-tools/${CT_TARGET}"
			CT_INSTALL_DIR="${CT_PREFIX_DIR}"
			CT_RM_RF_PREFIX_DIR=y
			CT_REMOVE_DOCS=y
			CT_INSTALL_DIR_RO=y
			CT_STRIP_ALL_TOOLCHAIN_EXECUTABLES=y

			#
			# Downloading
			#
			# CT_FORBID_DOWNLOAD is not set
			# CT_FORCE_DOWNLOAD is not set
			CT_CONNECT_TIMEOUT=10
			# CT_ONLY_DOWNLOAD is not set
			# CT_USE_MIRROR is not set

			#
			# Extracting
			#
			# CT_FORCE_EXTRACT is not set
			CT_OVERIDE_CONFIG_GUESS_SUB=y
			# CT_ONLY_EXTRACT is not set
			CT_PATCH_BUNDLED=y
			# CT_PATCH_LOCAL is not set
			# CT_PATCH_BUNDLED_LOCAL is not set
			# CT_PATCH_LOCAL_BUNDLED is not set
			# CT_PATCH_BUNDLED_FALLBACK_LOCAL is not set
			# CT_PATCH_LOCAL_FALLBACK_BUNDLED is not set
			# CT_PATCH_NONE is not set
			CT_PATCH_ORDER="bundled"

			#
			# Build behavior
			#
			CT_PARALLEL_JOBS=0
			CT_LOAD=""
			CT_USE_PIPES=y
			CT_EXTRA_CFLAGS_FOR_BUILD=""
			CT_EXTRA_LDFLAGS_FOR_BUILD=""
			CT_EXTRA_CFLAGS_FOR_HOST=""
			CT_EXTRA_LDFLAGS_FOR_HOST=""
			# CT_CONFIG_SHELL_SH is not set
			# CT_CONFIG_SHELL_ASH is not set
			CT_CONFIG_SHELL_BASH=y
			# CT_CONFIG_SHELL_CUSTOM is not set
			CT_CONFIG_SHELL="${bash}"

			#
			# Logging
			#
			# CT_LOG_ERROR is not set
			# CT_LOG_WARN is not set
			CT_LOG_INFO=y
			# CT_LOG_EXTRA is not set
			# CT_LOG_ALL is not set
			# CT_LOG_DEBUG is not set
			CT_LOG_LEVEL_MAX="INFO"
			# CT_LOG_SEE_TOOLS_WARN is not set
			CT_LOG_PROGRESS_BAR=y
			CT_LOG_TO_FILE=y
			CT_LOG_FILE_COMPRESS=y

			#
			# Target options
			#
			CT_ARCH="alpha"
			CT_ARCH_SUPPORTS_32=y
			CT_ARCH_SUPPORTS_WITH_CPU=y
			CT_ARCH_SUPPORTS_WITH_TUNE=y
			CT_ARCH_DEFAULT_32=y
			CT_ARCH_CPU=""
			CT_ARCH_TUNE=""
			CT_ARCH_32=y
			CT_ARCH_BITNESS=32
			CT_TARGET_CFLAGS=""
			CT_TARGET_LDFLAGS=""
			CT_ARCH_alpha=y
			# CT_ARCH_arm is not set
			# CT_ARCH_avr32 is not set
			# CT_ARCH_blackfin is not set
			# CT_ARCH_m68k is not set
			# CT_ARCH_mips is not set
			# CT_ARCH_nios2 is not set
			# CT_ARCH_powerpc is not set
			# CT_ARCH_s390 is not set
			# CT_ARCH_sh is not set
			# CT_ARCH_sparc is not set
			# CT_ARCH_x86 is not set
			CT_ARCH_alpha_AVAILABLE=y
			CT_ARCH_arm_AVAILABLE=y
			CT_ARCH_avr32_AVAILABLE=y
			CT_ARCH_blackfin_AVAILABLE=y
			CT_ARCH_m68k_AVAILABLE=y
			CT_ARCH_microblaze_AVAILABLE=y
			CT_ARCH_mips_AVAILABLE=y
			CT_ARCH_nios2_AVAILABLE=y
			CT_ARCH_powerpc_AVAILABLE=y
			CT_ARCH_s390_AVAILABLE=y
			CT_ARCH_sh_AVAILABLE=y
			CT_ARCH_sparc_AVAILABLE=y
			CT_ARCH_x86_AVAILABLE=y
			CT_ARCH_SUFFIX=""

			#
			# Generic target options
			#
			# CT_MULTILIB is not set
			CT_ARCH_USE_MMU=y

			#
			# Target optimisations
			#
			CT_ARCH_FLOAT=""

			#
			# alpha other options
			#
			CT_ARCH_ALPHA_EV4=y
			# CT_ARCH_ALPHA_EV45 is not set
			# CT_ARCH_ALPHA_EV5 is not set
			# CT_ARCH_ALPHA_EV56 is not set
			# CT_ARCH_ALPHA_EV6 is not set
			# CT_ARCH_ALPHA_EV67 is not set
			CT_ARCH_ALPHA_VARIANT="ev4"

			#
			# Toolchain options
			#

			#
			# General toolchain options
			#
			CT_FORCE_SYSROOT=y
			CT_USE_SYSROOT=y
			CT_SYSROOT_NAME="sysroot"
			CT_SYSROOT_DIR_PREFIX=""
			CT_WANTS_STATIC_LINK=y
			# CT_STATIC_TOOLCHAIN is not set
			CT_TOOLCHAIN_PKGVERSION=""
			CT_TOOLCHAIN_BUGURL=""

			#
			# Tuple completion and aliasing
			#
			CT_TARGET_VENDOR="unknown"
			CT_TARGET_ALIAS_SED_EXPR=""
			CT_TARGET_ALIAS=""

			#
			# Toolchain type
			#
			CT_CROSS=y
			# CT_CANADIAN is not set
			CT_TOOLCHAIN_TYPE="cross"

			#
			# Build system
			#
			CT_BUILD=""
			CT_BUILD_PREFIX=""
			CT_BUILD_SUFFIX=""

			#
			# Misc options
			#
			# CT_TOOLCHAIN_ENABLE_NLS is not set

			#
			# Operating System
			#
			CT_BARE_METAL=y
			CT_KERNEL="bare-metal"
			CT_KERNEL_bare_metal=y
			# CT_KERNEL_linux is not set
			CT_KERNEL_bare_metal_AVAILABLE=y
			CT_KERNEL_linux_AVAILABLE=y
			CT_KERNEL_windows_AVAILABLE=y

			#
			# Common kernel options
			#

			#
			# Binary utilities
			#
			CT_ARCH_BINFMT_ELF=y
			CT_BINUTILS="binutils"
			CT_BINUTILS_binutils=y

			#
			# GNU binutils
			#
			# CT_CC_BINUTILS_SHOW_LINARO is not set
			CT_BINUTILS_V_2_25=y
			# CT_BINUTILS_V_2_24 is not set
			# CT_BINUTILS_V_2_23_2 is not set
			# CT_BINUTILS_V_2_23_1 is not set
			# CT_BINUTILS_V_2_22 is not set
			# CT_BINUTILS_V_2_21_53 is not set
			# CT_BINUTILS_V_2_21_1a is not set
			# CT_BINUTILS_V_2_20_1a is not set
			# CT_BINUTILS_V_2_19_1a is not set
			# CT_BINUTILS_V_2_18a is not set
			CT_BINUTILS_VERSION="2.25"
			CT_BINUTILS_2_25_or_later=y
			CT_BINUTILS_2_24_or_later=y
			CT_BINUTILS_2_23_or_later=y
			CT_BINUTILS_2_22_or_later=y
			CT_BINUTILS_2_21_or_later=y
			CT_BINUTILS_2_20_or_later=y
			CT_BINUTILS_2_19_or_later=y
			CT_BINUTILS_2_18_or_later=y
			CT_BINUTILS_HAS_HASH_STYLE=y
			CT_BINUTILS_HAS_GOLD=y
			CT_BINUTILS_HAS_PLUGINS=y
			CT_BINUTILS_HAS_PKGVERSION_BUGURL=y
			CT_BINUTILS_LINKER_LD=y
			CT_BINUTILS_LINKERS_LIST="ld"
			CT_BINUTILS_LINKER_DEFAULT="bfd"
			# CT_BINUTILS_PLUGINS is not set
			CT_BINUTILS_EXTRA_CONFIG_ARRAY=""

			#
			# binutils other options
			#

			#
			# C-library
			#
			CT_LIBC="newlib"
			CT_LIBC_VERSION="2.2.0"
			CT_LIBC_newlib=y
			# CT_LIBC_none is not set
			CT_LIBC_glibc_AVAILABLE=y
			CT_THREADS="none"
			CT_LIBC_mingw_AVAILABLE=y
			CT_LIBC_musl_AVAILABLE=y
			CT_LIBC_newlib_AVAILABLE=y
			# CT_CC_NEWLIB_SHOW_LINARO is not set
			CT_LIBC_NEWLIB_V_2_2_0=y
			# CT_LIBC_NEWLIB_V_2_1_0 is not set
			# CT_LIBC_NEWLIB_V_2_0_0 is not set
			# CT_LIBC_NEWLIB_V_1_20_0 is not set
			# CT_LIBC_NEWLIB_V_1_19_0 is not set
			# CT_LIBC_NEWLIB_V_1_18_0 is not set
			# CT_LIBC_NEWLIB_V_1_17_0 is not set

			#
			# Architecture specific options
			#
			CT_LIBC_none_AVAILABLE=y
			CT_LIBC_uClibc_AVAILABLE=y
			CT_LIBC_SUPPORT_THREADS_NONE=y

			#
			# Common C library options
			#
			CT_THREADS_NONE=y

			#
			# newlib other options
			#
			# CT_LIBC_NEWLIB_IO_C99FMT is not set
			# CT_LIBC_NEWLIB_IO_LL is not set
			# CT_LIBC_NEWLIB_IO_FLOAT is not set
			# CT_LIBC_NEWLIB_DISABLE_SUPPLIED_SYSCALLS is not set
			CT_LIBC_NEWLIB_ENABLE_TARGET_OPTSPACE=y
			CT_LIBC_NEWLIB_EXTRA_CONFIG_ARRAY=""

			#
			# C compiler
			#
			CT_CC="gcc"
			CT_CC_VERSION="5.1.0"
			CT_CC_CORE_PASS_2_NEEDED=y
			CT_CC_gcc=y
			# CT_CC_GCC_SHOW_LINARO is not set
			CT_CC_V_5_1=y
			# CT_CC_V_4_9_2 is not set
			# CT_CC_V_4_9_1 is not set
			# CT_CC_V_4_9_0 is not set
			# CT_CC_V_4_8_4 is not set
			# CT_CC_V_4_8_3 is not set
			# CT_CC_V_4_8_2 is not set
			# CT_CC_V_4_8_1 is not set
			# CT_CC_V_4_8_0 is not set
			# CT_CC_V_4_7_4 is not set
			# CT_CC_V_4_7_3 is not set
			# CT_CC_V_4_7_2 is not set
			# CT_CC_V_4_7_1 is not set
			# CT_CC_V_4_7_0 is not set
			# CT_CC_V_4_6_4 is not set
			# CT_CC_V_4_6_3 is not set
			# CT_CC_V_4_6_2 is not set
			# CT_CC_V_4_6_1 is not set
			# CT_CC_V_4_6_0 is not set
			# CT_CC_V_4_5_3 is not set
			# CT_CC_V_4_5_2 is not set
			# CT_CC_V_4_5_1 is not set
			# CT_CC_V_4_5_0 is not set
			# CT_CC_V_4_4_7 is not set
			# CT_CC_V_4_4_6 is not set
			# CT_CC_V_4_4_5 is not set
			# CT_CC_V_4_4_4 is not set
			# CT_CC_V_4_4_3 is not set
			# CT_CC_V_4_4_2 is not set
			# CT_CC_V_4_4_1 is not set
			# CT_CC_V_4_4_0 is not set
			# CT_CC_V_4_3_6 is not set
			# CT_CC_V_4_3_5 is not set
			# CT_CC_V_4_3_4 is not set
			# CT_CC_V_4_3_3 is not set
			# CT_CC_V_4_3_2 is not set
			# CT_CC_V_4_3_1 is not set
			# CT_CC_V_4_2_4 is not set
			# CT_CC_V_4_2_2 is not set
			CT_CC_GCC_4_2_or_later=y
			CT_CC_GCC_4_3_or_later=y
			CT_CC_GCC_4_4_or_later=y
			CT_CC_GCC_4_5_or_later=y
			CT_CC_GCC_4_6_or_later=y
			CT_CC_GCC_4_7_or_later=y
			CT_CC_GCC_4_8_or_later=y
			CT_CC_GCC_4_9_or_later=y
			CT_CC_GCC_5_1=y
			CT_CC_GCC_5_1_or_later=y
			CT_CC_GCC_HAS_GRAPHITE=y
			CT_CC_GCC_USE_GRAPHITE=y
			CT_CC_GCC_HAS_LTO=y
			CT_CC_GCC_USE_LTO=y
			CT_CC_GCC_HAS_PKGVERSION_BUGURL=y
			CT_CC_GCC_HAS_BUILD_ID=y
			CT_CC_GCC_HAS_LNK_HASH_STYLE=y
			CT_CC_GCC_USE_GMP_MPFR=y
			CT_CC_GCC_USE_MPC=y
			CT_CC_GCC_HAS_LIBQUADMATH=y
			CT_CC_GCC_HAS_LIBSANITIZER=y
			# CT_CC_LANG_FORTRAN is not set
			CT_CC_SUPPORT_CXX=y
			CT_CC_SUPPORT_FORTRAN=y
			CT_CC_SUPPORT_JAVA=y
			CT_CC_SUPPORT_ADA=y
			CT_CC_SUPPORT_OBJC=y
			CT_CC_SUPPORT_OBJCXX=y
			CT_CC_SUPPORT_GOLANG=y

			#
			# Additional supported languages:
			#
			# CT_CC_LANG_CXX is not set

			#
			# gcc other options
			#
			CT_CC_ENABLE_CXX_FLAGS=""
			CT_CC_CORE_EXTRA_CONFIG_ARRAY=""
			CT_CC_EXTRA_CONFIG_ARRAY=""
			CT_CC_STATIC_LIBSTDCXX=y
			# CT_CC_GCC_SYSTEM_ZLIB is not set

			#
			# Optimisation features
			#

			#
			# Settings for libraries running on target
			#
			CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y
			# CT_CC_GCC_LIBMUDFLAP is not set
			# CT_CC_GCC_LIBGOMP is not set
			# CT_CC_GCC_LIBSSP is not set
			# CT_CC_GCC_LIBQUADMATH is not set

			#
			# Misc. obscure options.
			#
			# CT_CC_GCC_DISABLE_PCH is not set
			CT_CC_GCC_LDBL_128=m
			# CT_CC_GCC_BUILD_ID is not set
			CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y
			# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set
			# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set
			# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set
			CT_CC_GCC_LNK_HASH_STYLE=""
			CT_CC_GCC_DEC_FLOAT_AUTO=y
			# CT_CC_GCC_DEC_FLOAT_BID is not set
			# CT_CC_GCC_DEC_FLOAT_DPD is not set
			# CT_CC_GCC_DEC_FLOATS_NO is not set

			#
			# Debug facilities
			#
			# CT_DEBUG_dmalloc is not set
			# CT_DEBUG_duma is not set
			# CT_DEBUG_gdb is not set
			# CT_DEBUG_ltrace is not set
			# CT_DEBUG_strace is not set

			#
			# Companion libraries
			#
			CT_COMPLIBS_NEEDED=y
			CT_GMP_NEEDED=y
			CT_MPFR_NEEDED=y
			CT_ISL_NEEDED=y
			CT_MPC_NEEDED=y
			CT_COMPLIBS=y
			CT_GMP=y
			CT_MPFR=y
			CT_ISL=y
			CT_MPC=y
			CT_GMP_V_6_0_0=y
			# CT_GMP_V_5_1_3 is not set
			# CT_GMP_V_5_1_1 is not set
			# CT_GMP_V_5_0_2 is not set
			# CT_GMP_V_5_0_1 is not set
			# CT_GMP_V_4_3_2 is not set
			# CT_GMP_V_4_3_1 is not set
			# CT_GMP_V_4_3_0 is not set
			CT_GMP_5_0_2_or_later=y
			CT_GMP_VERSION="6.0.0a"
			CT_MPFR_V_3_1_2=y
			# CT_MPFR_V_3_1_0 is not set
			# CT_MPFR_V_3_0_1 is not set
			# CT_MPFR_V_3_0_0 is not set
			# CT_MPFR_V_2_4_2 is not set
			# CT_MPFR_V_2_4_1 is not set
			# CT_MPFR_V_2_4_0 is not set
			CT_MPFR_VERSION="3.1.2"
			CT_ISL_V_0_14=y
			# CT_ISL_V_0_12_2 is not set
			CT_ISL_VERSION="0.14"
			CT_MPC_V_1_0_2=y
			# CT_MPC_V_1_0_1 is not set
			# CT_MPC_V_1_0 is not set
			# CT_MPC_V_0_9 is not set
			# CT_MPC_V_0_8_2 is not set
			# CT_MPC_V_0_8_1 is not set
			# CT_MPC_V_0_7 is not set
			CT_MPC_VERSION="1.0.2"

			#
			# Companion libraries common options
			#
			# CT_COMPLIBS_CHECK is not set

			#
			# Companion tools
			#

			#
			# READ HELP before you say 'Y' below !!!
			#
			# CT_COMP_TOOLS is not set
			;;
		3)
			clear

			mkdir -p src
			[ -e crosstool-ng ] || git clone --depth 1 https://github.com/crosstool-ng/crosstool-ng.git
			cd crosstool-ng
			./bootstrap
			./configure --enable-local
			make -j $(nproc)
			make install
			cp ../config .config

			SAMPLES="alphaev56-unknown-linux-gnu alphaev67-unknown-linux-gnu arm-bare_newlib_cortex_m3_nommu-eabi arm-cortex_a15-linux-gnueabi arm-cortexa5-linux-uclibcgnueabihf arm-cortex_a8-linux-gnueabi arm-cortexa9_neon-linux-gnueabihf armeb-unknown-eabi armeb-unknown-linux-gnueabi armeb-unknown-linux-uclibcgnueabi arm-unknown-eabi arm-unknown-linux-gnueabi arm-unknown-linux-uclibcgnueabi arm-unknown-linux-uclibcgnueabihf armv6-rpi-linux-gnueabi avr32-unknown-none bfin-unknown-linux-uclibc i586-geode-linux-uclibc i586-mingw32msvc,i686-none-linux-gnu i686-nptl-linux-gnu i686-unknown-mingw32 m68k-unknown-elf m68k-unknown-uclinux-uclibc mips64el-n32-linux-uclibc mips64el-n64-linux-uclibc mips-ar2315-linux-gnu mipsel-sde-elf mipsel-unknown-linux-gnu mips-malta-linux-gnu mips-unknown-elf mips-unknown-linux-uclibc nios2-elf-mingw32 powerpc-405-linux-gnu powerpc64-unknown-linux-gnu powerpc-860-linux-gnu powerpc-e300c3-linux-gnu powerpc-e500v2-linux-gnuspe powerpc-unknown-linux-gnu powerpc-unknown-linux-uclibc powerpc-unknown_nofpu-linux-gnu s390-ibm-linux-gnu s390x-ibm-linux-gnu sh4-unknown-linux-gnu sparc-unknown-linux-gnu x86_64-unknown-linux-gnu x86_64-unknown-linux-uclibc x86_64-unknown-mingw32"

			mkdir -p ../x-tools
			for sample in $SAMPLES; do
				../build-sample.sh $sample || echo "$sample" >>../x-tools/broken
				./ct-ng clean
			done
			cd ..

			mkdir -p bin
			cd bin
			for sample in $SAMPLES; do
				ln -sf ../x-tools/$sample/bin/* .
				rm -f '*'
			done
			cd ..
			;;
		4)
			clear

			pacman -Syu --noconfirm gperf flex bison help2man gawk ncurses
			;;
		5)
			clear
			apt-get install -y gperf flex bison help2man gawk libncurses5-dev
			;;
		6)
			clear
			[ -e x-tools ] && chmod -R u+w x-tools
			rm -rf crosstools-ng
			;;
		esac
		;;
	17)
		echo "[.17.] -> File comparison "
		echo -e "${blue}[+] Enter package options ${NC}"
		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			wget -O - http://www.bay12games.com/dwarves/df_43_05_linux.tar.bz2 | tar xj

			mkdir -p bin
			cat <<END >bin/dwarf_fortress
cd $PWD/df_linux
./df
END
			chmod 755 bin/dwarf_fortress
			;;
		2)
			clear
			set -eu -o pipefail

			apt-get -y install libasound2:i386 libasyncns0:i386 libatk1.0-0:i386 libc6:i386 libcaca0:i386 libcairo2:i386 libdatrie1:i386 libdbus-1-3:i386 libdrm2:i386 libexpat1:i386 libffi6:i386 libflac8:i386 libfontconfig1:i386 libfreetype6:i386 libgdk-pixbuf2.0-0:i386 libgl1-mesa-glx:i386 libglapi-mesa:i386 libglib2.0-0:i386 libglu1-mesa:i386 libgraphite2-3:i386 libgtk2.0-0:i386 libharfbuzz0b:i386 libjbig0:i386 libjpeg-turbo8:i386 libjson-c2:i386 liblzma5:i386 libncursesw5:i386 libogg0:i386 libpango-1.0-0:i386 libpangocairo-1.0-0:i386 libpangoft2-1.0-0:i386 libpcre3:i386 libpixman-1-0:i386 libpng12-0:i386 libpulse0:i386 libsdl1.2debian:i386 libsdl-image1.2:i386 libsdl-ttf2.0-0:i386 libselinux1:i386 libslang2:i386 libsndfile1:i386 libthai0:i386 libtiff5:i386 libtinfo5:i386 libvorbis0a:i386 libvorbisenc2:i386 libwebp5:i386 libwrap0:i386 libx11-6:i386 libx11-xcb1:i386 libxau6:i386 libxcb1:i386 libxcb-dri2-0:i386 libxcb-dri3-0:i386 libxcb-glx0:i386 libxcb-present0:i386 libxcb-render0:i386 libxcb-shm0:i386 libxcb-sync1:i386 libxcomposite1:i386 libxcursor1:i386 libxdamage1:i386 libxdmcp6:i386 libxext6:i386 libxfixes3:i386 libxi6:i386 libxinerama1:i386 libxrandr2:i386 libxrender1:i386 libxshmfence1:i386 libxxf86vm1:i386 zlib1g:i386
			;;

		esac
		;;

	18)
		echo "[.18.] -> dirb is a dictionary-based web directory scanning tool "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			mkdir bin
			wget -O dirb.tar.gz https://downloads.sourceforge.net/project/dirb/dirb/2.22/dirb222.tar.gz
			tar -xf dirb.tar.gz

			chmod -R a+X dirb222/
			cd dirb222
			chmod a+x configure
			./configure
			make
			cp dirb ../bin

			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed curl gnutls
			;;
		3)
			set -eu -o pipefail

			apt-get -y install libcurl4-gnutls-dev

			;;
		19)
			echo "[.19.] -> Catalog blasting tools "
			echo -e "${blue}[+] Enter package options ${NC}"
			mkdir bin
			git clone --depth 1 https://github.com/maurosoria/dirsearch.git

			cd bin
			ln -s ../dirsearch/dirsearch.py .

			;;
		esac
		;;

	20)
		clear

		echo "[.20.] -> dislocker is a tool to decrypt Microsoft’s BitLocker encrypted volumes from Linux or OSX.  "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			wget -O dislocker.tar.gz https://github.com/Aorimn/dislocker/archive/v0.7.1.tar.gz
			tar xf dislocker.tar.gz
			DISLOCKERDIR=$(ls -d dislocker-*)
			cd $DISLOCKERDIR

			cmake .
			make -j $(nproc)
			cd ..
			mkdir bin
			cd bin
			ls -l ../$DISLOCKERDIR/src/

			ln -s ../$DISLOCKERDIR/src/dislocker-bek .
			ln -s ../$DISLOCKERDIR/src/dislocker-file .
			ln -s ../$DISLOCKERDIR/src/dislocker-fuse .
			ln -s ../$DISLOCKERDIR/src/dislocker-metadata .

			;;
		2)
			clear

			set -eu -o pipefail

			pacman -Syu --noconfirm --needed mbedtls fuse
			;;
		3)
			clear
			set -eu -o pipefail

			apt-get -y install gcc cmake make libfuse-dev libmbedtls-dev ruby-dev && apt-get -y install gcc cmake make libfuse-dev libpolarssl-dev ruby-dev
			;;
		esac
		;;
	21)
		echo "[.21.] -> A series of practical tools for ELF files "
		echo -e "${blue}[+] Enter package options ${NC}"
		git clone --depth 1 https://github.com/BR903/ELFkickers
		cd ELFkickers
		make -j $(nproc)
		cd ..
		mv ELFkickers/bin ./bin
		;;
	22)
		echo "[.22.] -> A small ELF file analyzer "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			wget http://www.elfparser.com/release/elfparser_x86_64_1.4.0.deb
			dpkg -x elfparser_x86_64_1.4.0.deb .
			mkdir -p bin
			mv usr/local/bin/elfparser bin/
			rm -rf usr
			;;
		2)
			clear
			set -eu -o pipefail

			apt-get install -y libqt5widgets5
			;;

		23)
			echo "[.23.] -> Tool for creating MD5 conflict binary files "
			echo -e "${blue}[+] Enter package options ${NC}"
			wget http://www.mscs.dal.ca/~selinger/md5collision/downloads/evilize-0.2.tar.gz
			tar zvxf evilize-0.2.tar.gz
			cd evilize-0.2
			make -j $(nproc)
			cd ..
			mkdir bin
			cd bin
			ln -s ../evilize-0.2/evilize .
			ln -s ../evilize-0.2/md5coll .
			;;
		24)
			echo "[.24.] -> Digital forensics "
			echo -e "${blue}[+] Enter package options ${NC}"

			git clone --depth 1 https://github.com/kholia/exetractor-clone.git

			mkdir bin
			cd bin
			ln -s ../exetractor-clone/ArchiveViewer.py ../exetractor-clone/ArchiveExtractor.py ../exetractor-clone/exetractor.py .
			cd ..
			;;
		25)
			echo "[.25.] -> Generate two files with the same md5 value "
			echo -e "${blue}[+] Enter package options ${NC}"
			[ -e fastcoll ] || git clone https://github.com/upbit/clone-fastcoll fastcoll
			cd fastcoll
			make

			cd ..
			mkdir bin
			cp fastcoll/fastcoll bin
			;;
		esac
		;;
	25)
		echo "[.25.] -> A small ELF file analyzer "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		echo "3. Uninstall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth=1 https://github.com/nccgroup/featherduster.git
			ctf-tools-pip install --upgrade -e featherduster

			mkdir bin || true
			cd bin
			cat >featherduster <<EOF
#!/bin/sh
exec python $(realpath ../featherduster/featherduster.py) "\$@"
EOF
			chmod +x featherduster
			;;
		2)
			clear
			set -eu -o pipefail

			apt-get -y install libgmp3-dev libncurses5-dev
			;;
		3)
			clear
			ctf-tools-pip uninstall -y featherduster || true

			rm ../bin/featherduster
			;;
		esac
		;;
	26)
		echo "[.25.] -> A small ELF file analyzer "
		echo -e "${blue}[+] Enter package options ${NC}"

		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth 1 https://github.com/mirror/firmware-mod-kit.git
			cd firmware-mod-kit/src
			./configure
			make
			cd ../..

			mkdir -p bin
			for i in firmware-mod-kit/*.sh; do
				echo "$(dirname $(readlink -m $0))/$i \"\$@\"" >bin/$(basename $i)
				chmod 755 bin/$(basename $i)
			done

			sed -i -e "s/SUDO=\"sudo\"/SUDO=\"\"/" firmware-mod-kit/*.sh
			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --noconfirm --needed zlib xz python2-magic

			;;
		3)
			clear
			set -eu -o pipefail

			apt-get -y install liblzma-dev python-magic zlib1g-dev
			;;
		esac
		;;
	27)
		echo "[.27.] -> A small ELF file analyzer "
		echo -e "${blue}[+] Enter package options ${NC}"
		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Uninstall"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			ctf-tools-pip3 install --upgrade 'git+https://github.com/ALSchwalm/foresight.git'
			;;
		2)
			clear
			ctf-tools-pip3 uninstall -y foresight || true
			;;
		28)
			echo "[.28.] -> Tool for creating MD5 conflict binary files "
			echo -e "${blue}[+] Enter package options ${NC}"
			wget https://web.eecs.utk.edu/~plank/plank/papers/CS-07-593/galois.tar

			mkdir -p galois
			cd galois
			tar xvf ../galois.tar
			make
			cd ..

			mkdir -p bin
			cd bin
			ln -s ../galois/{gf_basic_tester,gf_div,gf_ilog,gf_inverse,gf_log,gf_mult,gf_xor,gf_xor_tester} .
			cd ..
			;;
		esac
		;;
	29)
		echo "[.29.] -> binutils is a set of binary tools "
		echo -e "${blue}[+] Enter package options ${NC}"
		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Archlinux"
		echo "3. Install-root-Debian"
		echo "4. Install-root-fedora"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			set -e -o pipefail

			find_latest_gdb_version() {
				git ls-remote --tags git://sourceware.org/git/binutils-gdb.git |
					grep -v users |
					grep -v '{}' |
					grep -oh 'gdb-[0-9]\{1,2\}\.[0-9]\{1,2\}\(\.[0-9]\{1,2\}\(\.[0-9]\{1,2\}\)\?\)\?-release' |
					sort --version-sort -r |
					sed 's/gdb-//g' |
					sed 's/-release//g' |
					head -n 1
			}

			VERSION=$(find_latest_gdb_version)
			echo $VERSION >gdb_version

			rm -rf "gdb" || true
			curl "https://ftp.gnu.org/gnu/gdb/gdb-$VERSION.tar.gz" | tar xz
			mv "gdb-$VERSION" "gdb"

			set +x
			# move to ctftools virtual env
			source ctf-tools-venv-activate
			set -x

			PREFIX=$(pwd)

			pushd ./gdb
			./configure \
				--prefix=$PREFIX \
				--with-python=$(which python) \
				--enable-targets=all \
				--with-guile=guile-2.0
			make -j $(nproc)
			make install
			# remove build artifacts
			make clean
			popd

			# reduce binary size a little...
			strip bin/gdb || true
			strip bin/gdbserver || true
			;;
		2)
			clear
			set -eu -o pipefail

			pacman -Syu --needed --noconfirm texinfo guile2.0
			;;
		3)
			clear
			set -eu -o pipefail

			apt-get -y install texinfo guile-2.0-dev
			;;
		4)
			clear
			dnf install -y texinfo
			;;
		esac
		;;
	30)
		echo "[.30.] ->  gdb-heap - Extensions to gdb for debugging dynamic memory allocation. "
		echo -e "${blue}[+] Enter package options ${NC}"
		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		echo "3. Install-root-fedora"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			git clone --depth=1 https://github.com/rogerhu/gdb-heap || true

			cd gdb-heap
			# make sure gdbinit exists
			touch ~/.gdbinit
			if ! grep "init-gdb-heap" ~/.gdbinit; then
				cat >>~/.gdbinit <<EOF

####
# added by ctf-tools
define init-gdb-heap
    python import sys; sys.path.append("$PWD"); import heap
end
document init-gdb-heap
    Initializes the gdb-heap extension (https://github.com/rogerhu/gdb-heap)
end
####

EOF
			fi
			;;
		2)
			clear
			apt-get install -y libc6-dbg
			;;
		3)
			clear
			dnf install -y dnf-plugins-core
			dnf debuginfo-install -y glibc
			;;
		31)
			echo "[.31.] -> GEF "
			echo -e "${blue}[+] Enter package options ${NC}"
			set -eu -o pipefail

			git clone --depth 1 https://github.com/hugsy/gef.git

			mkdir bin
			cat >bin/gdb-gef <<EOF
#!/bin/sh
exec gdb -q -ex init-gef "\$@"
EOF
			chmod +rx bin/gdb-gef

			cd gef
			# make sure gdbinit exists
			touch ~/.gdbinit
			if ! grep "init-gef" ~/.gdbinit; then
				cat >>~/.gdbinit <<EOF

####
# added by ctf-tools
define init-gef
    source $PWD/gef.py
end
document init-gef
    Initializes the GEF (GDB Enhanced Features) plugin
end
####

EOF
			fi
			;;
		esac
		;;
	32)
		echo "[.32.] ->  "
		echo -e "${blue}[+] Enter package options ${NC}"
		echo -e "${blue}**********Choose installation version************${NC}"
		echo "1. Install"
		echo "2. Install-root-Debian"
		read -p "[+]ENTER No.-->" Selects
		echo -e "${NC}"
		case $Selects in
		1)
			clear
			;;
		esac
		;;
	esac
}

Selects
initial
